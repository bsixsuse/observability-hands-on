version: '3'

######################################################################################
#  Utility Functions to be reused by other task files.
######################################################################################

tasks:
  waitForHealthState:
    silent: true
    cmds:
      - |
        {{.OBSERVE_FUNCTIONS}}
        count=0
        timeout=360 
        echo "Waiting for component to reach a '{{.STATE}}' state"
        while true
        do
          state=$(get_component_state {{.STS_URL}} {{.STS_TOKEN}} "{{.STQL}}") 
          if [ "$state" == "{{.STATE}}" ]; then
            echo "Component reached state of '$state'"
            break
          fi
          printf "Current: '$state'\r"
          count=$(($count + 10))
          if [ $count -gt $timeout ]; then
            echo "Wait timed out!!!"
            exit 1
          fi
          timer=10
          while [ $timer -gt -1 ]; do
            printf "\rElapsed: %02ds. Retry: %02ds. " $(($count - 10)) $timer
            timer=$(($timer - 1))
            sleep 1
          done
        done

  countdown:
    silent: true
    desc: "TIME variable with countdown time in the format 'hh:mm:ss'"
    cmds:
      - |
        {{.FUNCTIONS}} 
        countdown "{{.TIME}}"

vars:
  OBSERVE_FUNCTIONS: |
    get_component_state() {
        local url=$1
        local service_token=$2
        local stql=$3

        local component
        component=$(get_component_snapshot $url $service_token "$stql")
        echo $component > last_server_resp.txt
        echo $component | jq -r '.viewSnapshotResponse.components[0].state.healthState'
    }

    get_component_snapshot() {
      local url=$1
      local service_token=$2
      local stql=$3

      local req
      req=$(cat <<EOM
    {
      "queryVersion": "1.0",
      "metadata":     {
        "groupingEnabled":       false,
        "showIndirectRelations": false,
        "minGroupSize":          10,
        "groupedByLayer":        false,
        "groupedByDomain":       false,
        "groupedByRelation":     false,
        "autoGrouping":          false,
        "connectedComponents":   false,
        "neighboringComponents": false,
        "showFullComponent":     false
      }
    }
    EOM
    )
      req=$(echo $req | jq --arg stql "$stql" '.query = "\($stql)"')
      curl -s -k -H "X-API-Token: $service_token" -H "Content-Type: application/json" -X POST -d "$req" $url/api/snapshot
    }

  FUNCTIONS: |
    function countdown() {
      local OLD_IFS="${IFS}"
      IFS=":"
      local ARR=( $1 )
      local SECONDS=$((  (ARR[0] * 60 * 60) + (ARR[1] * 60) + ARR[2]  ))
      local START=$(date +%s)
      local END=$((START + SECONDS))
      local CUR=$START

      while [[ $CUR -lt $END ]]; do
        CUR=$(date +%s)
        LEFT=$((END-CUR))

        printf "\r%02d:%02d:%02d" \
                $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))

        sleep 1
      done
      IFS="${OLD_IFS}"
      echo "        "
    }
    
